<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAhTA4AIQwOAeFMTghhTE5LYUwOS6FMDkuhTA5LoUwOS6FMDkuhTA5LoUwOS6FMDkuhTA5LoUw
        OS6FMDkuhTA5LoUwOS6FMDkuhTA5LoUwOS6FMDkuhTA5LoUwOS6FMDkuhTA5LoUwOS6FMDkshDA5GoUx
        OAOFMTgAAAAAAIQxOQCEMTkVhDE5ioUxOdqFMTnphTE56YUxOemFMTnphTE56YUxOemFMTnphTE56YUx
        OemFMTnphTE56YUxOemFMTnphTE56YUxOemFMTnphTE56YUxOemFMTnphTE56YUxOemFMTnphTE56YUx
        OeiFMTnOhTE4aIUxOQaFMTkAdSszAYQxOX2FMTn8hTE5/4UxOf+FMTn/hTE5/4UxOf+FMTn/hTE5/4Ux
        Of+FMTn/hTE5/4UxOf+FMTn/hTE5/4UxOf+FMTn/hTE5/4UxOf+FMTn/hTE5/4UxOf+FMTn/hTE5/4Ux
        Of+FMTn/hTE5/4UxOf+FMTnuhTA5TIUxOQCFMTgShTE5vYUxOf+FMTn/hTE5/4UxOf+FMTn/hTE5/4Ux
        Of+FMTn/hTE5/4UxOf+FMTn/hTE5/4UxOf+FMTn/hTE5/4UxOf+FMTn/hTE5/4UxOf+FMTn/hTE5/4Ux
        Of+FMTn/hTE5/4UxOf+FMTn/hTE5/4UxOf+FMTmOiS86AIUxORiFMTnIhTE5/4UxOf+FMTn/hTE5/4Ux
        Of+FMTn/hTE5/4UxOf+FMTn/hTE5/4UxOf+FMTn/hTE5/4QwOP+FMDj/hTE5/4UxOf+FMTn/hTE5/4Ux
        OP+FMTj/hTE5/4UxOf+FMTn/hTE5/4UxOf+FMTn/hTE5/4UxOZl5MTkBhTE5F4UxOceFMTn/hTE5/4Ux
        Of+FMTn/hTA4/4QwOP+FMTn/hTE5/4UxOf+ELzf/hTE5/4UxOf+GMjr/jEFI/4o9Rf+FMTn/hTE5/4Ux
        OP+FMD7/hC1M/4QtSf+FMTv/hTE4/4UxOf+FMTn/hTE5/4UxOf+FMTn/hTE5mXkxOQGFMTkXhTE5x4Ux
        Of+FMTn/hTE5/4UxOf+MQUj/kUxT/4UxOf+FMDj/hzY9/5JQVv+IOD//hTA4/4g4P/+vkpT/pXp+/4Ux
        Of+FMTn/hCdh/4EWrP+AEMn/gBDG/4Iam/+EK1D/hTE4/4UxOf+FMTn/hTE5/4UxOf+FMTmZeTE5AYUx
        OReFMTnHhTE5/4UxOf+FMTn/hTE5/6R4e/+9sLD/mFth/4Y0PP+jdnr/vbKy/5ZXXf+ELzf/iDlA/7ej
        pP+qh4r/hTE3/4QpW/+AD8r/fwjo/38J5/9/Cef/fwnm/4AVs/+FLUj/hTE4/4UxOf+FMTn/hTE5/4Ux
        OZl5MTkBhTE5F4UxOceFMTn/hTE5/4UxOf+FMDn/j0dN/7Scnf+9sbH/ro2Q/8C4uP+ogYX/iTpB/4Uw
        OP+IOUD/tqKj/6qHif+FMDr/gRub/38J5/9/CeX/fwnl/38J5f9/CeX/fwrj/4Mid/+FMTf/hTE5/4Ux
        Of+FMTn/hTE5mXkxOQGFMTkXhTE5x4UxOf+FMTn/hTE5/4UxOf+ELzf/j0hP/7yvr//Iy8r/r5KU/4g3
        P/+FMDj/hTE5/4g5QP+2oqP/qoeJ/4UvPv+BFLj/fwjn/38J5f9/CeX/fwnl/38J5f9/Ceb/ghyS/4Ux
        Of+FMTn/hTE5/4UxOf+FMTmZeTE5AYUxOReFMTnHhTE5/4UxOf+FMTn/hTE5/4Y1Pf+jdXn/wbm4/76y
        sv+8rq//l1lf/4UxOf+FMDn/iDlA/7aio/+qh4n/hTA8/4EXq/9/COj/fwnl/38J5f9/CeX/fwnl/38J
        5v+CH4b/hTE4/4UxOf+FMTn/hTE5/4UxOZl5MTkBhTE5F4UxOceFMTn/hTE5/4UxOf+FMTn/n21x/8G6
        uv+ngIP/kEtR/7Oam/+8sLD/klBW/4QvN/+IOUD/tqKj/6qHif+FMTf/gyN2/38K3/9/Cef/fwnl/38J
        5f9/Cej/gA7O/4QqWf+FMTf/hTE5/4UxOf+FMTn/hTE5mXkxOQGFMTkXhTE5x4UxOf+FMTn/hTE5/4Ux
        Of+XWl//onN2/4g4P/+ELjf/jkVL/6V6fv+ORk3/hC84/4g5QP+2oqP/qoeJ/4UxOP+FLz//gh6M/4AN
        0/9/CeT/fwri/4AQyP+DJHL/hTE6/4UxOf+FMTn/hTE5/4UxOf+FMTmZeTE5AYUxOReFMTnHhTE5/4Ux
        Of+FMTn/hTE5/4UwOP+FMDj/hC83/4QwOP+ELzf/hTA4/4QwOP+EMDj/iDg//7aio/+qhon/hDA4/4Qw
        N/+ELzr/gyhZ/4IidP+CI3D/hCpP/4QwOP+FMDj/hTE5/4UxOf+FMTn/hTE5/4UxOZl5MTkBhTE5F4Ux
        OceFMTn/hTE5/4UxOf+FMjr/jEFI/45GTf+ORk3/jkZN/45GTf+ORk3/jkZN/45GTf+RTVP/uKeo/66P
        kf+ORk3/jkZN/45GTf+OR0v/jkdK/45HSv+ORkz/jkZN/4o9RP+FMTn/hTE5/4UxOf+FMTn/hTE5mXkx
        OQGFMTkXhTE5x4UxOf+FMTn/hTE5/4c1Pf+wk5X/vrOz/72xsf+9sbH/vbGx/72xsf+9sbH/vbGx/72y
        sv/EwcD/wr29/72xsf+9sbH/vbGx/72xsf+9sbH/vbGx/72xsf+9srL/pHh7/4UxOf+FMTn/hTE5/4Ux
        Of+FMTmZeTE5AYUxOReFMTnHhTE5/4UxOf+FMTn/hjM7/5lfZP+fbnL/n21x/59tcP+fbXD/n21x/59t
        cf+fbXH/oXF1/72wsf+1oKH/n21x/59tcf+fbXH/n21x/59tcf+fbXH/n21x/59ucf+UUlj/hTE5/4Ux
        Of+FMTn/hTE5/4UxOZl5MTkBhTE5F4UxOceFMTn/hTE5/4UxOf+FMTn/hDA4/4QwNv+ELzz/gytJ/4Ms
        R/+ELzr/hDA2/4QvOP+HNz//tqKj/6qGif+ELzj/hC84/4QuNv+ELzf/hC84/4QvOP+ELjb/hC43/4Uw
        OP+FMTn/hTE5/4UxOf+FMTn/hTE5mXkxOQGFMTkXhTE5x4UxOf+FMTn/hTE5/4UxOf+FMTn/hChh/4EX
        q/+AEMr/gBDG/4Iam/+ELFD/hTE3/4g5QP+2oqP/qoeJ/4UxOf+GNDz/lFRa/4s/Rv+FMDj/hDA4/5BK
        UP+RTFL/hTE5/4UxOf+FMTn/hTE5/4UxOf+FMTmZeTE5AYUxOReFMTnHhTE5/4UxOf+FMTn/hTE4/4Qp
        W/+AD8v/fwjo/38J5/9/COf/fwjn/4EVs/+ELUj/iDk//7aio/+qh4n/hDA4/41DSf+5p6j/r5CS/4o9
        RP+RTFL/uaeo/66Qkv+HNT3/hTE5/4UxOf+FMTn/hTE5/4UxOZl5MTkBhTE5F4UxOceFMTn/hTE5/4Ux
        Of+FMTr/ghqc/38J5/9/CeX/fwnl/38J5f9/CeX/fwnj/4Iid/+IOT7/tqKj/6qHif+FMTn/hjM6/51n
        a/+/t7b/spiZ/7ilpv+7q6z/k1NY/4UxOf+FMTn/hTE5/4UxOf+FMTn/hTE5mXkxOQGFMTkXhTE5x4Ux
        Of+FMTn/hTE5/4UwPf+BE7j/fwjo/38J5f9/CeX/fwnl/38J5f9/Cef/ghyR/4g5QP+2oqP/qoeJ/4Ux
        Of+FMTn/hTE5/6V5ff/Hx8b/w7+//5leZP+ELzf/hTE5/4UxOf+FMTn/hTE5/4UxOf+FMTmZeTE5AYUx
        OReFMTnHhTE5/4UxOf+FMTn/hTA7/4EXrP9/Cej/fwnl/38J5f9/CeX/fwnl/38J5v+CH4X/iDk//7ai
        o/+qh4n/hTE5/4UwOP+QS1H/tqKj/72ysv/At7f/ro6Q/4o+Rf+FMDj/hTE5/4UxOf+FMTn/hTE5/4Ux
        OZl5MTkBhTE5F4UxOceFMTn/hTE5/4UxOf+FMTj/giN1/38K3/9/Cef/fwnl/38J5f9/COj/gA/O/4Qp
        WP+IOT7/tqKj/6qHif+FMDj/i0BH/7Wfof+5qqr/k1FX/5xlav/AuLj/q4eK/4c1PP+FMTn/hTE5/4Ux
        Of+FMTn/hTE5mXkxOQGFMTkXhTE5x4UxOf+FMTn/hTE5/4UxOf+FLz//gh6L/4AN0/9/CeX/fwrj/4AQ
        yP+DJHL/hTA5/4g5QP+2oqP/qoeJ/4UwOP+IOUH/onN3/5NRV/+ELzf/hjI6/5tkaf+cZ2v/hjI6/4Ux
        Of+FMTn/hTE5/4UxOf+FMTmZeTE5AYUxOReFMTnHhTE5/4UxOf+FMTn/hTE5/4UxOP+FMDz/hCla/4Mj
        df+DJHH/hCtQ/4UxOf+FMTn/hjQ8/5hdYv+TUlj/hTE5/4UxOf+FMTn/hTE5/4UxOf+FMTn/hTE5/4Ux
        Of+FMTn/hTE5/4UxOf+FMTn/hTE5/4UxOZl5MTkBhTE5F4UxOceFMTn/hTE5/4UxOf+FMTn/hTE5/4Ux
        Of+FMTf/hTI2/4UyNv+FMTj/hTE5/4UxOf+FMTn/hDA4/4QwOP+FMTn/hTE5/4UxOf+FMTn/hTE5/4Ux
        Of+FMTn/hTE5/4UxOf+FMTn/hTE5/4UxOf+FMTn/hTE5mXkxOQGFMDkWhTE5xIUxOf+FMTn/hTE5/4Ux
        Of+FMTn/hTE5/4UxOf+FMTn/hTE5/4UxOf+FMTn/hTE5/4UxOf+FMTn/hTE5/4UxOf+FMTn/hTE5/4Ux
        Of+FMTn/hTE5/4UxOf+FMTn/hTE5/4UxOf+FMTn/hTE5/4UxOf+FMTmWlhhKAIUxNweFMTmfhTE5/4Ux
        Of+FMTn/hTE5/4UxOf+FMTn/hTE5/4UxOf+FMTn/hTE5/4UxOf+FMTn/hTE5/4UxOf+FMTn/hTE5/4Ux
        Of+FMTn/hTE5/4UxOf+FMTn/hTE5/4UxOf+FMTn/hTE5/4UxOf+FMTn/hTE5/IQwOW2FLzkAhDE4AIQx
        ODaFMTnMhTE5+4UxOf6FMTn+hTE5/oUxOf6FMTn+hTE5/oUxOf6FMTn+hTE5/oUxOf6FMTn+hTE5/oUx
        Of6FMTn+hTE5/oUxOf6FMTn+hTE5/oUxOf6FMTn+hTE5/oUxOf6FMTn+hTE5/oUxOfeFMTmrhTA3GYQx
        OACCMTkAezE5AIUyOSKFMTlghTE5c4UxOXOFMTlzhTE5c4UxOXOFMTlzhTE5c4UxOXOFMTlzhTE5c4Ux
        OXOFMTlzhTE5c4UxOXOFMTlzhTE5c4UxOXOFMTlzhTE5c4UxOXOFMTlzhTE5c4UxOXOFMTlyhDA5U4Ux
        ORSEMDoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAwAAAA4AAAAEAAAABAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAQAAAAGAAAABwAAAA/////8=
</value>
  </data>
</root>